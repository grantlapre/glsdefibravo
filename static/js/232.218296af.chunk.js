"use strict";(self.webpackChunkglsdefib=self.webpackChunkglsdefib||[]).push([[232],{14076:(t,e,i)=>{i.d(e,{y:()=>n});var s=i(93880);class n extends s.Gt{async authenticateUser(){var t;if(!this.provider||null===(t=this.chainConfig)||void 0===t||!t.chainId)throw s.kC.notConnectedError();const{chainNamespace:e,chainId:i}=this.chainConfig;if(this.status!==s.Uz.CONNECTED)throw s.kC.notConnectedError("Not connected with wallet, Please login/connect first");const n=await this.provider.request({method:"eth_accounts"});if(n&&n.length>0){const t=(0,s._c)(n[0],this.name);if(t){if(!(0,s.Wm)(t))return{idToken:t}}const a={domain:window.location.origin,uri:window.location.href,address:n[0],chainId:parseInt(i,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:(new Date).toISOString()},r=await(0,s.I5)(a,e),o=await this.provider.request({method:"personal_sign",params:[r,n[0]]}),h=await(0,s.cr)(e,o,r,this.name,this.sessionTime);return(0,s.KE)(n[0],this.name,h),{idToken:h}}throw s.kC.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnect(){if(this.status!==s.Uz.CONNECTED)throw s.kC.disconnectionError("Not connected with wallet");const t=await this.provider.request({method:"eth_accounts"});t&&t.length>0&&(0,s.Md)(t[0],this.name)}}},9232:(t,e,i)=>{i.d(e,{MetamaskAdapter:()=>h});var s=i(52536),n=i(33976),a=i.n(n),r=i(93880),o=i(14076);class h extends o.y{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),(0,s.c)(this,"adapterNamespace",r.Kg.EIP155),(0,s.c)(this,"currentChainNamespace",r.Mj.EIP155),(0,s.c)(this,"type",r.oJ.EXTERNAL),(0,s.c)(this,"name",r.W2.METAMASK),(0,s.c)(this,"status",r.Uz.NOT_READY),(0,s.c)(this,"rehydrated",!1),(0,s.c)(this,"metamaskProvider",null),this.chainConfig=t.chainConfig||null,this.sessionTime=t.sessionTime||86400}get provider(){return this.status===r.Uz.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}async init(t){if(super.checkInitializationRequirements(),this.metamaskProvider=await a()({mustBeMetaMask:!0}),!this.metamaskProvider)throw r.EF.notInstalled("Metamask extension is not installed");this.status=r.Uz.READY,this.emit(r.Sc.READY,r.W2.METAMASK);try{r.Yz.debug("initializing metamask adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(e){this.emit(r.Sc.ERRORED,e)}}setAdapterSettings(t){this.status!==r.Uz.READY&&null!==t&&void 0!==t&&t.sessionTime&&(this.sessionTime=t.sessionTime)}async connect(){if(super.checkConnectionRequirements(),this.chainConfig||(this.chainConfig=(0,r.wh)(r.Mj.EIP155,1)),this.status=r.Uz.CONNECTING,this.emit(r.Sc.CONNECTING,{adapter:r.W2.METAMASK}),!this.metamaskProvider)throw r.kC.notConnectedError("Not able to connect with metamask");try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=this.metamaskProvider;if(t!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=r.Uz.CONNECTED,!this.provider)throw r.kC.notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",(()=>{this.disconnect()})),this.emit(r.Sc.CONNECTED,{adapter:r.W2.METAMASK,reconnected:this.rehydrated}),this.provider}catch(t){throw this.status=r.Uz.READY,this.rehydrated=!1,this.emit(r.Sc.ERRORED,t),r.kC.connectionError("Failed to login with metamask wallet")}}async disconnect(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnect(),null===(t=this.provider)||void 0===t||t.removeAllListeners(),e.cleanup?(this.status=r.Uz.NOT_READY,this.metamaskProvider=null):this.status=r.Uz.READY,this.rehydrated=!1,this.emit(r.Sc.DISCONNECTED)}async getUserInfo(){if(this.status!==r.Uz.CONNECTED)throw r.kC.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(t){if(!this.metamaskProvider)throw r.kC.notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(e){if(4902!==e.code)throw e;await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget]}]})}}}}}]);